
import {List} from 'immutable';
import {Projectlog} from "./Projectlog";
import {
LoadProjectlogsAction, AddProjectlogAction, ToggleProjectlogAction, DeleteProjectlogAction, StartBackendAction, EndBackendAction
} from './todoActions';
import {UiState, initialUiState} from "./ui-state";

export function calculateProjectlogs(state: List<Projectlog>, action) {
  if (!state) {
    return List([]);
  }

  if (action instanceof LoadProjectlogsAction) {
    return List(action.todos);
  } else if (action instanceof AddProjectlogAction) {
    return state.push(action.newProjectlog);
  } else if (action instanceof ToggleProjectlogAction) {
    return toggleProjectlog(state, action);
  } else if (action instanceof DeleteProjectlogAction) {
    let index = state.findIndex((todo) => todo.id === action.todo.id);
    return state.delete(index);
  } else {
    return state;
  }
}

function toggleProjectlog(state, action) {
  let index = state.findIndex((todo: Projectlog) => todo.id === action.todo.id);
  let toggled: Projectlog = state.get(index);
  return state.set(index, new Projectlog({ id: toggled.id, description: toggled.description, completed: !toggled.completed }));
}

export function calculateUiState(state: UiState, action) {
  if (!state) {
    return initialUiState;
  }

  if (action instanceof StartBackendAction) {
    return new UiState(true, action.message);
  }
  else if (action instanceof EndBackendAction) {
    return new UiState(false, action.message ? action.message : initialUiState.message);
  }
  else {
    return state;
  }
}
